---
import type { YouTubeVideo } from '../types/youtube';

export interface Props {
  videos: YouTubeVideo[];
  playlistTitle?: string;
  debug?: boolean;
}

const { videos, playlistTitle = "Tutorial Videos", debug = false } = Astro.props;

// Function to extract video ID from YouTube URL
function getVideoId(url: string): string {
  const match = url.match(/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([^&\n?#]+)/);
  return match ? match[1] : '';
}

// Function to get YouTube thumbnail URL
function getThumbnailUrl(videoId: string): string {
  return `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;
}

// Debug: Log all video data
if (debug) {
  console.log('=== YouTube Stories Debug ===');
  videos.forEach((video, index) => {
    console.log(`Video ${index}:`, {
      id: video.id,
      title: video.title,
      hasId: !!video.id,
      idLength: video.id?.length || 0
    });
  });
  console.log('=============================');
}
---

<div class="youtube-stories-container mb-8">
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-xl font-semibold text-neutral-800">{playlistTitle}</h2>
    <span class="text-sm text-neutral-500">{videos.length} videos</span>
  </div>
  
  {debug && (
    <div class="debug-info mb-4 p-4 bg-yellow-100 rounded-lg text-sm">
      <h3 class="font-bold mb-2">Debug Info:</h3>
      {videos.map((video, index) => (
        <div class="mb-1">
          Video {index}: ID="{video.id}" ({video.id?.length || 0} chars) - {video.title}
        </div>
      ))}
    </div>
  )}
  
  <div class="stories-scroll-container">
    <div class="stories-wrapper">
      {videos.map((video, index) => {
        // Debug: Log video data during build
        console.log(`Video ${index}:`, { id: video.id, title: video.title });
        return (
          <div class="story-item" data-video-id={video.id} data-video-title={video.title}>
            <div class="story-ring">
              <div class="story-content">
                <img 
                  src={video.thumbnail || getThumbnailUrl(video.id)} 
                  alt={video.title}
                  class="story-thumbnail"
                  loading="lazy"
                />
                <div class="story-overlay">
                  <svg class="play-icon" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </div>
              </div>
            </div>
            <p class="story-title">{video.title}</p>
          </div>
        );
      })}
    </div>
  </div>
</div>

<style>
  .youtube-stories-container {
    width: 100%;
    max-width: 100%;
  }

  .stories-scroll-container {
    overflow-x: auto;
    overflow-y: hidden;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding: 8px 0;
  }

  .stories-scroll-container::-webkit-scrollbar {
    display: none;
  }

  .stories-wrapper {
    display: flex;
    gap: 20px;
    padding: 0 4px;
    min-width: max-content;
  }

  .story-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    cursor: pointer;
    transition: transform 0.2s ease;
    min-width: 110px;
    -webkit-tap-highlight-color: transparent;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  .story-item:hover {
    transform: scale(1.05);
  }

  .story-item:active {
    transform: scale(0.95);
  }

  .story-ring {
    position: relative;
    width: 110px;
    height: 195px;
    border-radius: 12px;
    background: linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
    padding: 3px;
    margin-bottom: 8px;
  }

  .story-content {
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: 9px;
    overflow: hidden;
    background: #fff;
    border: 2px solid #fff;
  }

  .story-thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 9px;
  }

  .story-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 9px;
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .story-item:hover .story-overlay {
    opacity: 1;
  }

  .play-icon {
    width: 28px;
    height: 28px;
    color: white;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.5));
  }

  .story-title {
    font-size: 12px;
    color: #374151;
    text-align: center;
    max-width: 110px;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    line-height: 1.3;
    margin: 0;
    height: 32px;
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .stories-wrapper {
      gap: 16px;
      padding: 0 16px;
    }
    
    .story-ring {
      width: 95px;
      height: 168px;
    }
    
    .story-item {
      min-width: 95px;
    }
    
    .story-title {
      max-width: 95px;
      font-size: 11px;
      height: 30px;
    }
    
    .play-icon {
      width: 24px;
      height: 24px;
    }
  }
</style>

<script>
  // TypeScript declarations for SimpleAnalytics
  declare global {
    interface Window {
      sa_event?: (eventName: string, metadata?: Record<string, any>) => void;
    }
  }

  // Add click handlers for video playback
  function initYouTubeStories() {
    const storyItems = document.querySelectorAll('.story-item');
    
    console.log('YouTube Stories: Found', storyItems.length, 'story items');
    
    storyItems.forEach((item, index) => {
      const videoId = item.getAttribute('data-video-id');
      const videoTitle = item.getAttribute('data-video-title');
      console.log(`Story item ${index}:`, { 
        videoId, 
        videoTitle,
        hasVideoId: !!videoId,
        videoIdLength: videoId ? videoId.length : 0,
        element: item 
      });
      
      // Single event handler for both click and touch
      const handleClick = function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const videoId = this.getAttribute('data-video-id');
        const videoTitle = this.getAttribute('data-video-title');
        console.log('Clicked:', { videoId, videoTitle });
        
        if (videoId && videoId.trim() !== '' && videoId !== 'undefined' && videoId !== 'null') {
          // Fire SimpleAnalytics event
          const fireAnalyticsEvent = () => {
            if (typeof window.sa_event === 'function') {
              // Get playlist title from the DOM
              const playlistTitleElement = document.querySelector('.youtube-stories-container h2');
              const currentPlaylistTitle = playlistTitleElement?.textContent || 'Tutorial Videos';
              
              window.sa_event('youtube_video_click', {
                video_id: videoId,
                video_title: videoTitle,
                playlist_title: currentPlaylistTitle
              });
              console.log('SimpleAnalytics event fired:', { videoId, videoTitle, playlistTitle: currentPlaylistTitle });
              return true;
            }
            return false;
          };

          // Try to fire event immediately, if not available wait for it to load
          if (!fireAnalyticsEvent()) {
            // Wait for SimpleAnalytics to load (max 3 seconds)
            let attempts = 0;
            const maxAttempts = 30; // 30 * 100ms = 3 seconds
            const checkInterval = setInterval(() => {
              attempts++;
              if (fireAnalyticsEvent() || attempts >= maxAttempts) {
                clearInterval(checkInterval);
                if (attempts >= maxAttempts) {
                  console.warn('SimpleAnalytics not loaded after 3 seconds - event not tracked');
                }
              }
            }, 100);
          }
          
          const youtubeUrl = `https://www.youtube.com/watch?v=${videoId}`;
          console.log('Opening URL in same tab:', youtubeUrl);
          
          // Always open in same tab
          window.location.href = youtubeUrl;
        } else {
          console.error('Invalid video ID:', { videoId, videoTitle });
          alert(`Error: Invalid video ID for "${videoTitle}". Please check the console for details.`);
        }
      };
      
      // Add only click event listener (works for both mouse and touch)
      item.addEventListener('click', handleClick, { passive: false });
      
      // Add visual feedback for touch
      item.addEventListener('touchstart', function(e) {
        this.style.transform = 'scale(0.95)';
      }, { passive: true });
      
      item.addEventListener('touchcancel', function() {
        this.style.transform = '';
      }, { passive: true });
      
      item.addEventListener('touchend', function() {
        setTimeout(() => {
          this.style.transform = '';
        }, 150);
      }, { passive: true });
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initYouTubeStories);
  } else {
    initYouTubeStories();
  }
  
  // Also initialize after page navigation (for SPAs)
  document.addEventListener('astro:page-load', initYouTubeStories);
</script> 